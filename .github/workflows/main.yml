name: YumRush CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type checking
        run: npm run typecheck
        
      - name: Linting
        run: npm run lint
        
      - name: Run backend tests
        run: npm test
        
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type checking
        run: npm run typecheck
        
      - name: Linting
        run: npm run lint
        
      - name: Run frontend tests
        run: npm test
        
  deploy-backend:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Trigger Render Deployment
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
          echo "ðŸš€ Backend deployment triggered on Render"
          
  deploy-frontend:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Update CICD-SETUP.md with information
        run: |
          echo "## Important Note About Vercel Deployment" >> CICD-SETUP.md
          echo "" >> CICD-SETUP.md
          echo "For simplicity and reliability, we recommend using Vercel's GitHub integration for automatic deployments:" >> CICD-SETUP.md
          echo "" >> CICD-SETUP.md
          echo "1. Go to [Vercel](https://vercel.com) and create an account if you don't have one" >> CICD-SETUP.md
          echo "2. Click 'Add New...' and select 'Project'" >> CICD-SETUP.md
          echo "3. Import your GitHub repository" >> CICD-SETUP.md
          echo "4. In the project settings:" >> CICD-SETUP.md
          echo "   - Set the Framework Preset to 'Vite'" >> CICD-SETUP.md
          echo "   - Set the Root Directory to 'frontend'" >> CICD-SETUP.md
          echo "   - Add any required environment variables" >> CICD-SETUP.md
          echo "5. Click 'Deploy'" >> CICD-SETUP.md
          echo "" >> CICD-SETUP.md
          echo "This approach is more reliable than using GitHub Actions for Vercel deployment." >> CICD-SETUP.md
      
      - name: Deployment message
        run: |
          echo "ðŸš€ For frontend deployment, please use Vercel's GitHub integration."
          echo "See CICD-SETUP.md for instructions."